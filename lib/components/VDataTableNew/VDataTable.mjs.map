{"version":3,"sources":["../../../src/components/VDataTableNew/VDataTable.tsx"],"names":["computed","inject","provide","ref","watch","convertToUnit","createRange","defineComponent","VDataTableHeaders","VDataTableRows","isMultipleHeaders","arr","length","Array","isArray","useHeaders","props","headerRows","rowColumns","headers","rows","width","slice","reduce","count","row","index","filter","col","rowspan","value","rowsWithStyle","rowStart","colStart","map","rowIndex","columnsWithStyle","colIndex","column","colEnd","colspan","rowEnd","newColumn","style","push","id","splice","i","immediate","tableGridStyles","minWidth","maxWidth","join","VDataTableExpandedKey","Symbol","for","createExpanded","expanded","Map","toggleExpand","item","isExpanded","has","delete","set","items","incoming","values","useExpanded","data","Error","VDataTable","name","type","required","height","String","Number","rowHeight","default","stickyHeader","Boolean","setup","slots","parseInt"],"mappings":"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","sourcesContent":["import { computed, inject, provide, ref, watch } from 'vue'\nimport { convertToUnit, createRange, defineComponent } from '@/util'\nimport { VDataTableHeaders } from './VDataTableHeaders'\nimport './VDataTable.sass'\n\nimport type { InjectionKey, PropType } from 'vue'\nimport { VDataTableRows } from './VDataTableRows'\n\ntype DataTableHeader = {\n  id: string\n  name: string\n  colspan?: number\n  rowspan?: number\n  minWidth?: string\n  maxWidth?: string\n}\n\nexport type Column = DataTableHeader & {\n  style: any\n}\n\nfunction isMultipleHeaders (arr: any): arr is DataTableHeader[][] {\n  return arr.length > 0 && Array.isArray(arr[0])\n}\n\nexport const useHeaders = (props: { headers: DataTableHeader[] | DataTableHeader[][], rowHeight?: number | string }) => {\n  const headerRows = ref<Column[][]>([])\n  const rowColumns = ref<Column[]>([])\n\n  watch(() => props.headers, () => {\n    const rows = isMultipleHeaders(props.headers) ? props.headers : [props.headers]\n\n    const width = rows[rows.length - 1].length + (rows.length > 1 ? rows.slice(0, rows.length - 1).reduce((count, row, index) => {\n      return count + row.filter(col => index + (col.rowspan ?? 0) === rows.length ? 1 : 0).length\n    }, 0) : 0)\n\n    rowColumns.value = Array(width)\n\n    const rowsWithStyle: Column[][] = []\n    let rowStart = 1\n    const colStart = createRange(width).map(() => 1)\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      const columnsWithStyle: Column[] = []\n\n      for (let colIndex = 0; colIndex < rows[rowIndex].length; colIndex++) {\n        const column = rows[rowIndex][colIndex]\n        const colEnd = colStart[rowIndex] + (column.colspan ?? 1)\n        const rowEnd = rowStart + (column.rowspan ?? 1)\n\n        const newColumn = {\n          ...column,\n          style: {\n            'grid-area': `${rowStart} / ${colStart[rowIndex]} / ${rowEnd} / ${colEnd}`,\n          },\n        }\n\n        columnsWithStyle.push(newColumn)\n\n        if (newColumn.id) {\n          rowColumns.value.splice(colStart[rowIndex] - 1, 1, newColumn)\n        }\n\n        colStart[rowIndex] = colEnd\n\n        for (let i = 0; i < (column.rowspan ?? 0); i++) {\n          colStart[rowIndex + i + 1] += 1\n        }\n      }\n\n      rowsWithStyle.push(columnsWithStyle)\n\n      rowStart += 1\n    }\n\n    headerRows.value = rowsWithStyle\n  }, {\n    immediate: true,\n  })\n\n  const tableGridStyles = computed(() => ({\n    'grid-template-columns': rowColumns.value.map(col => `minmax(${col.minWidth ?? '150px'}, ${col.maxWidth ?? '1fr'})`).join(' '),\n  }))\n\n  return {\n    tableGridStyles,\n    rowColumns,\n    headerRows,\n  }\n}\n\nexport const VDataTableExpandedKey: InjectionKey<{\n  toggleExpand: (index: number, item: any) => void\n}> = Symbol.for('vuetify:datatable:expanded')\n\nexport const createExpanded = (props: { items: any[] }) => {\n  const expanded = ref(new Map<string, number>())\n\n  function toggleExpand (index: number, item: any) {\n    const isExpanded = expanded.value.has(item.id)\n\n    if (isExpanded) {\n      expanded.value.delete(item.id)\n    } else {\n      expanded.value.set(item.id, index)\n    }\n  }\n\n  const items = computed(() => {\n    const incoming = [...props.items]\n\n    for (const index of expanded.value.values()) {\n      incoming.splice(index + 1, 0, {\n        [VDataTableExpandedKey as symbol]: true,\n      })\n    }\n\n    return incoming\n  })\n\n  provide(VDataTableExpandedKey, { toggleExpand })\n\n  return { items, expanded, toggleExpand }\n}\n\nexport const useExpanded = () => {\n  const data = inject(VDataTableExpandedKey)\n\n  if (!data) throw new Error('foo')\n\n  return data\n}\n\nexport const VDataTable = defineComponent({\n  name: 'VDataTable',\n\n  props: {\n    headers: {\n      type: Array as PropType<DataTableHeader[] | DataTableHeader[][]>,\n      required: true,\n    },\n    items: {\n      type: Array as PropType<any[]>,\n      required: true,\n    },\n    height: [String, Number],\n    rowHeight: {\n      type: [String, Number],\n      default: 48,\n    },\n    stickyHeader: Boolean,\n  },\n\n  setup (props, { slots }) {\n    const { rowColumns, headerRows, tableGridStyles } = useHeaders(props)\n\n    const { items } = createExpanded(props)\n\n    return () => (\n      <div\n        class=\"v-data-table\"\n        style={{\n          height: convertToUnit(props.height),\n        }}\n      >\n        <table\n          class=\"v-data-table__table\"\n          style={{\n            ...tableGridStyles.value,\n          }}\n          role=\"table\"\n        >\n          <thead class=\"v-data-table__thead\" role=\"rowgroup\">\n            <VDataTableHeaders rows={ headerRows.value } rowHeight={ parseInt(props.rowHeight, 10) } sticky={ props.stickyHeader } />\n          </thead>\n          <tbody class=\"v-data-table__tbody\" role=\"rowgroup\">\n            <VDataTableRows\n              columns={ rowColumns.value }\n              items={ items.value }\n              rowHeight={ parseInt(props.rowHeight, 10) }\n              v-slots={ slots }\n            />\n          </tbody>\n        </table>\n      </div>\n    )\n  },\n})\n"],"file":"VDataTable.mjs"}